Week 1
This week I made some research on the different widgets on Qt that allowed me to design sliders for the frontend, such as QSlider, QDial and QScrollBar (to adapt the view for the multiple sliders and buttons we will enventually code) which inherit their functionalities from QAbstractSlider. I also had a look at the widget QProgressBar and how to link its value with QSlider, as well as at the possible styles and layouts you can give to a Qt Widget. I had never used or seen any Qt Graphics functionality before. I started working late to get informed about Qt Slider Widgets because I joined the Frontend team on thursday evening only, as there were complications in the backend, and people needed in the frontend.\
Next week I will start coding and trying to implement these different sliders in the frontend branch.}

Week 2
This week, I first gathered all the properties the Back-end is taking care of giving our creatures in order to know what "initial" buttons we want to use as inputs for our creatures properties. I then experimented coding to link QSliders and QProgressBars, but also checkboxes for random inputs and draging in different layouts in mainwindow.ui. I created a side branch (Slider_Prop) to experiment on before doing any commits to the project.
Next week, I will make sure my files are correct to make commits / merge my side branch to the frontend one, and test the functionalities, adjust them. I will differentiate case for predatures, preys, plants, and maybe implement proportional input values for the different properties (like if you are very big, then you can't move very fast).

Week 3
This week, I merged (manually, as I had to make slight modifications of my code's emplacements) the work I did on Slider prop branch to the Frontend Start Screen branch, and I coded a randomizing button that gives out random values for all the different properties, with the widgets (spinbox and slider) linked together. I ended up not implementing proportional input values as when meeting with the group on manday, we judged it would be more interesting to have to possibility for the creatures to evolve into "invicible creatures" eventually.
Next week, I will connect this layout to the list (predator 1, predator 2, predator 3 etc. (or prey or plant)), so I will have to fiinish differentiating the cases for the creatures and find a way to link the list so that we can choose the properties for each creature separately.

Week 4
This week, I created a "reset button" which resets the creature's caracteristics to 0 when clicked. I put all widgets in a groupbox to help its manipulation. I also added a "delete all" button to deleter all created creatures in creature_list. Finally I sorted by type and number the predators, preys, and plants.
Next week, I will correct a bug in this last sorting function, as it sorts it as a string and not "the string", then "the number". I will also start connecting the frontend creatures createdand their properties with the backend (after having looked at how to do it this week, and better understanding how the back end was implemented).

Week 5
This week, I corrected some display details, such as the window size, and simulation button size and position. I also added a button to delete individually a creature from creature list without having to delete all. I also changed the names of the creatures on the frontend display to match the variable names for the backend. I also merged the branch "Frontend StartScreen" to "Main", with Vincenzo, correcting the slight inconveniences and issues. I commented all the code from the Frontend Start Screen branch, to make it more understandable by the back-end. We started connecting the frontend creatures' properties' selection with the backend. Lastly, I changed some display features of the simulation button (simBut) as we can't launch the somulation with no creatures created. Therefore, I had to complete some of the functions to adapt to this condition, such as the functions linked to the buttons delete_all_creatures and delete_creature, or the ones to add new creatures.
Next week, I will correct the "diet" property selection as obviously there is no selection possible once we have the creatures called "Herbivore" or "Omnivorous" and not "preys" and "predators" anymore. I will also continue to connect it with the backend with Vincenzo.

Week 6
This week, I cleaned the code by getting rid for example of the set_visible() functions that were repeated over and over by changing the layout and seperating the start button on another window (so that when you click it, the window with everything open pops up and no there is not visibility function needed). Then I corrected some issues with the display features of the simBut. I also did some "esthetics" changes, like for example the name of mainwindow, or rearranging the displays. Then I started working with Laurentiu on finishing to connect the frontend "user interface" with actually creating these creatures/plant in the backend. Therefore we created new classes such as PropertySlider or StartScreen and connected everything, making sure to differentiate the cases Creatures or Plants. We also had to do some slight modifications to the way we were adding items to creature_list in order to be able to access them better. We changed the way we initially wanted to define the property sliders, to now have custom ones pop up depending on which creature/plant we click on in creature_list.
Next week, with Laurentiu, we will finalise to connect everything like the new definition of the reset and random buttons (as now the sliders aren't the same), as well as "activate" the simulation button. Then we will finally merge everything into main and normally everything should work!

Week 7
This week, I added a background color to the widgets to that we are sure to see them (there was an issue on Mac and not on other computers). I added a box around every label of the custom sliders (in propertyslider.ui so that the white "pops out" and otherwise the background was way too large and uneven). I also corrected some visibility issues for the reset button and the random button.
This week I also worked with Laurentiu on connecting the random and reset buttons with our new implementation of the sliders, and finally merged everything into main. Even once the merge was done, there were a few issues remaining when building that we had to correct on main. The main issue was that a new sorting function had been coded (the sorting function i had implemented until now for creature_list was a pretty na√Øve one), and this version was connected to our old implementation of creature_list (and so then sliders).
